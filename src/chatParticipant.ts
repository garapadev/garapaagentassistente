import * as vscode from 'vscode';
import * as fs from 'fs/promises';
import * as fsSync from 'fs';
import * as path from 'path';

interface Role {
    name: string;
    content: string;
    filePath: string;
}

export class GarapaAgentChatParticipant {
    private roles: Role[] = [];
    private currentRole: Role | null = null;
    private agentMode: boolean = false; // New agent mode flag

    constructor() {
        this.loadRoles();
    }
    
    async handleChatRequest(
        request: vscode.ChatRequest,
        context: vscode.ChatContext,
        stream: vscode.ChatResponseStream,
        token: vscode.CancellationToken
    ): Promise<void> {
        try {
            // Show thinking indicator
            stream.progress('Pensando...');

            // Get the user's message
            const userMessage = request.prompt;
            
            // Check for role selection commands
            if (userMessage.startsWith('/help')) {
                this.showHelp(stream);
                return;
            }
            
            if (userMessage.startsWith('/init')) {
                await this.initializeRoles(stream);
                return;
            }
            
            if (userMessage.startsWith('/setup')) {
                await this.handleSetupCommand(stream);
                return;
            }
            
            if (userMessage.startsWith('/agent on')) {
                this.agentMode = true;
                stream.markdown('ü§ñ **Modo Agente ATIVADO!**\n\nAgora posso executar a√ß√µes como:\n- ‚úÖ Criar e editar arquivos\n- ‚úÖ Executar comandos\n- ‚úÖ Implementar c√≥digo\n- ‚úÖ Refatorar projetos\n\nTente: *"criar um arquivo teste.js com uma fun√ß√£o hello world"*');
                return;
            }
            
            if (userMessage.startsWith('/agent off')) {
                this.agentMode = false;
                stream.markdown('üí¨ **Modo Agente DESATIVADO**\n\nVoltei ao modo chat normal. Use `/agent on` para reativar.');
                return;
            }
            
            if (userMessage.startsWith('/mode') || userMessage.startsWith('/agent')) {
                const status = this.agentMode ? 'ü§ñ ATIVO' : 'üí¨ DESATIVO';
                stream.markdown(`**Modo Agente:** ${status}\n\n**Comandos:**\n- \`/agent on\` - Ativar modo agente\n- \`/agent off\` - Desativar modo agente\n\n**No modo agente posso:**\n- Criar/editar arquivos\n- Executar comandos\n- Implementar funcionalidades\n- Fazer refatora√ß√µes`);
                return;
            }
            
            if (userMessage.startsWith('/role ')) {
                const roleName = userMessage.substring(6).trim();
                this.setRole(roleName, stream);
                return;
            }
            
            if (userMessage.startsWith('/rules') || userMessage.startsWith('/roles')) {
                this.listRoles(stream);
                return;
            }
            
            if (userMessage.startsWith('/clear-role') || userMessage.startsWith('/clear')) {
                this.clearRole(stream);
                return;
            }
            
            if (userMessage.startsWith('/status')) {
                this.showStatus(stream);
                return;
            }
            
            // Analyze the workspace context
            const workspaceInfo = await this.getWorkspaceContext();
            
            // Check if user is asking for file operations or code generation
            const isFileOperation = this.detectFileOperation(userMessage);
            const isCodeRequest = this.detectCodeRequest(userMessage);
            
            if (this.agentMode && (isFileOperation || isCodeRequest)) {
                await this.handleAgentRequest(userMessage, stream, workspaceInfo);
                return;
            }
            
            // Craft a prompt for the language model with role context
            const systemPrompt = await this.createSystemPrompt(workspaceInfo);
            const fullPrompt = `${systemPrompt}\n\nUsu√°rio: ${userMessage}`;            // Try to get a language model
            const models = await vscode.lm.selectChatModels({ 
                vendor: 'copilot',
                family: 'gpt-4o'
            });

            if (models.length === 0) {
                stream.markdown('‚ùå Nenhum modelo de linguagem dispon√≠vel. Verifique se o GitHub Copilot est√° ativo.');
                return;
            }

            const model = models[0];
            
            // Send request to the language model
            const messages: vscode.LanguageModelChatMessage[] = [
                vscode.LanguageModelChatMessage.User(userMessage)
            ];

            const response = await model.sendRequest(messages, {
                modelOptions: {
                    temperature: 0.7,
                    maxTokens: 1000
                }
            }, token);

            // Stream the response
            let responseText = '';
            for await (const fragment of response.text) {
                responseText += fragment;
                stream.markdown(fragment);
            }

            // Add some helpful suggestions
            if (userMessage.toLowerCase().includes('erro') || userMessage.toLowerCase().includes('problema')) {
                stream.button({
                    command: 'workbench.action.problems.focus',
                    title: 'üîç Ver Problemas'
                });
            }

            if (userMessage.toLowerCase().includes('arquivo') || userMessage.toLowerCase().includes('file')) {
                stream.button({
                    command: 'workbench.action.quickOpen',
                    title: 'üìÅ Abrir Arquivo'
                });
            }

        } catch (error) {
            console.error('Erro no chat participant:', error);
            
            if (error instanceof vscode.LanguageModelError) {
                stream.markdown(`‚ùå Erro do modelo de linguagem: ${error.message}`);
                
                if (error.cause instanceof Error && error.cause.message.includes('off_topic')) {
                    stream.markdown('üí° Eu posso ajudar apenas com quest√µes relacionadas ao desenvolvimento de software e CRM.');
                } else if (error.cause instanceof Error && error.cause.message.includes('consent')) {
                    stream.markdown('‚ö†Ô∏è Voc√™ precisa autorizar o uso do GitHub Copilot para continuar.');
                }
            } else {
                stream.markdown('‚ùå Ocorreu um erro inesperado. Tente novamente.');
            }
        }
    }

    async provideFollowups(
        result: vscode.ChatResult,
        context: vscode.ChatContext,
        token: vscode.CancellationToken
    ): Promise<vscode.ChatFollowup[]> {
        const followups: vscode.ChatFollowup[] = [];

        // Role-specific followups
        if (this.currentRole) {
            followups.push({
                prompt: '/clear-role',
                label: 'üîÑ Desativar role',
                command: 'garapacrm.clearRole'
            });
        } else {
            followups.push({
                prompt: '/roles',
                label: 'üé≠ Ver roles dispon√≠veis',
                command: 'garapacrm.listRoles'
            });
        }

        // Suggest common follow-up questions
        followups.push(
            {
                prompt: 'Como posso melhorar este c√≥digo?',
                label: 'üí° Melhorar c√≥digo',
                command: 'garapacrm.improveCode'
            },
            {
                prompt: 'Explicar este erro em detalhes',
                label: 'üîç Explicar erro',
                command: 'garapacrm.explainError'
            },
            {
                prompt: 'Mostrar exemplos similares',
                label: 'üìö Ver exemplos',
                command: 'garapacrm.showExamples'
            }
        );

        // Add role-specific suggestions based on current role
        if (this.currentRole) {
            const roleName = this.currentRole.name.toLowerCase();
            
            if (roleName.includes('frontend')) {
                followups.push({
                    prompt: 'Como melhorar a performance deste componente?',
                    label: '‚ö° Otimizar performance',
                    command: 'garapacrm.optimizePerformance'
                });
            }
            
            if (roleName.includes('backend')) {
                followups.push({
                    prompt: 'Como tornar esta API mais segura?',
                    label: 'üîí Melhorar seguran√ßa',
                    command: 'garapacrm.improveSecurity'
                });
            }
            
            if (roleName.includes('crm')) {
                followups.push({
                    prompt: 'Como automatizar este processo de vendas?',
                    label: 'ü§ñ Automatizar vendas',
                    command: 'garapacrm.automateProcess'
                });
            }
        }

        return followups;
    }

    private async createSystemPrompt(workspaceInfo: any): Promise<string> {
        let basePrompt = `Voc√™ √© o GarapaAgent Assistant, um assistente de IA inteligente especializado em desenvolvimento de software com sistema de roles personaliz√°veis.

CONTEXTO DO WORKSPACE:
${workspaceInfo}`;

        // Add role-specific instructions if a role is selected
        if (this.currentRole) {
            basePrompt += `

ROLE ATIVO: ${this.currentRole.name}
${this.currentRole.content}`;

            // Check for documentation URLs in the role content
            const docUrls = this.extractUrlsFromContent(this.currentRole.content);
            if (docUrls.length > 0) {
                basePrompt += `

DOCUMENTA√á√ÉO CARREGADA:`;
                
                for (const url of docUrls) {
                    try {
                        const docContent = await this.fetchDocumentation(url);
                        if (docContent) {
                            basePrompt += `

--- DOCUMENTA√á√ÉO DE ${url} ---
${docContent.substring(0, 3000)}...
--- FIM DA DOCUMENTA√á√ÉO ---`;
                        }
                    } catch (error) {
                        basePrompt += `

ERRO: N√£o foi poss√≠vel carregar documenta√ß√£o de ${url}`;
                    }
                }
            }

            basePrompt += `

IMPORTANTE: Siga estritamente as diretrizes do role acima. Use o comportamento, tecnologias e estrutura de resposta definidos no role. Se documenta√ß√£o foi carregada, use-a como refer√™ncia principal.`;
        }

        basePrompt += `

INSTRU√á√ïES GERAIS:
- Responda em portugu√™s brasileiro
- Seja prestativo e espec√≠fico
- Forne√ßa exemplos de c√≥digo quando relevante
- Sugira melhores pr√°ticas
- Se n√£o souber algo, seja honesto
- Foque em solu√ß√µes pr√°ticas para desenvolvimento

COMANDOS DISPON√çVEIS:
- /role [nome] - Ativa um role espec√≠fico
- /roles - Lista todos os roles dispon√≠veis
- /clear-role - Remove o role ativo

ESPECIALIDADES BASE:
- TypeScript/JavaScript
- React/Next.js
- Node.js
- Banco de dados
- APIs REST
- Sistemas CRM/ERP/SAAS
- VS Code extensions
- Arquitetura de software
- DevOps e Cloud`;

        return basePrompt;
    }

    private async loadRoles(): Promise<void> {
        try {
            const workspaceFolders = vscode.workspace.workspaceFolders;
            if (!workspaceFolders) {
                return;
            }

            const rolesPath = path.join(workspaceFolders[0].uri.fsPath, 'roles');
            
            if (!fsSync.existsSync(rolesPath)) {
                return;
            }

            const files = fsSync.readdirSync(rolesPath);
            this.roles = [];

            for (const file of files) {
                if (file.endsWith('.mdc')) {
                    const filePath = path.join(rolesPath, file);
                    const content = fsSync.readFileSync(filePath, 'utf8');
                    const name = path.basename(file, '.mdc');
                    
                    this.roles.push({
                        name,
                        content,
                        filePath
                    });
                }
            }

            console.log(`Loaded ${this.roles.length} roles:`, this.roles.map(r => r.name));
        } catch (error) {
            console.error('Error loading roles:', error);
        }
    }

    private setRole(roleName: string, stream: vscode.ChatResponseStream): void {
        const role = this.roles.find(r => 
            r.name.toLowerCase().includes(roleName.toLowerCase()) ||
            roleName.toLowerCase().includes(r.name.toLowerCase())
        );

        if (role) {
            this.currentRole = role;
            stream.markdown(`‚úÖ **Role ativado:** ${role.name}\n\n`);
            stream.markdown(`Agora estou seguindo as diretrizes do role "${role.name}". Como posso ajudar?`);
            
            // Add helpful buttons
            stream.button({
                command: 'workbench.action.openSettings',
                title: '‚öôÔ∏è Ver Role Ativo'
            });
        } else {
            stream.markdown(`‚ùå **Role n√£o encontrado:** "${roleName}"\n\n`);
            this.listRoles(stream);
        }
    }

    private listRoles(stream: vscode.ChatResponseStream): void {
        if (this.roles.length === 0) {
            stream.markdown('üìÇ **Nenhum role encontrado**\n\nCrie arquivos `.mdc` na pasta `roles/` do seu workspace.');
            return;
        }

        stream.markdown('üìã **Roles Dispon√≠veis:**\n\n');
        
        this.roles.forEach(role => {
            const isActive = this.currentRole?.name === role.name;
            const status = isActive ? 'üü¢ **ATIVO**' : '‚ö™';
            stream.markdown(`${status} \`/role ${role.name}\` - ${this.extractRoleTitle(role.content)}\n`);
        });

        stream.markdown('\nüí° **Como usar:** Digite `/role [nome]` para ativar um role');
        
        if (this.currentRole) {
            stream.markdown(`\nüéØ **Role atual:** ${this.currentRole.name}`);
        }
    }

    private clearRole(stream: vscode.ChatResponseStream): void {
        if (this.currentRole) {
            const previousRole = this.currentRole.name;
            this.currentRole = null;
            stream.markdown(`‚úÖ **Role removido:** ${previousRole}\n\nAgora estou usando o comportamento padr√£o do GarapaAgent Assistant.`);
        } else {
            stream.markdown('‚ÑπÔ∏è **Nenhum role ativo** para remover.');
        }
    }

    private extractRoleTitle(content: string): string {
        const lines = content.split('\n');
        const titleLine = lines.find(line => line.startsWith('# '));
        return titleLine ? titleLine.substring(2).trim() : 'Role personalizado';
    }

    private async getWorkspaceContext(): Promise<string> {
        const workspaceFolders = vscode.workspace.workspaceFolders;
        if (!workspaceFolders) {
            return 'Nenhum workspace aberto.';
        }

        let context = `Workspace: ${workspaceFolders[0].name}\n`;
        
        // Get active editor info
        const activeEditor = vscode.window.activeTextEditor;
        if (activeEditor) {
            const document = activeEditor.document;
            context += `Arquivo ativo: ${document.fileName}\n`;
            context += `Linguagem: ${document.languageId}\n`;
            
            // Get selected text if any
            const selection = activeEditor.selection;
            if (!selection.isEmpty) {
                const selectedText = document.getText(selection);
                context += `Texto selecionado:\n${selectedText}\n`;
            }
        }

        // Get recently opened files
        const recentFiles = await vscode.workspace.findFiles('**/*.{ts,js,tsx,jsx,json}', '**/node_modules/**', 5);
        if (recentFiles.length > 0) {
            context += `Arquivos recentes: ${recentFiles.map(f => f.fsPath.split('/').pop()).join(', ')}\n`;
        }

        return context;
    }

    private showHelp(stream: vscode.ChatResponseStream): void {
        stream.markdown(`# ü§ñ GarapaAgent Assistant - Comandos Dispon√≠veis

## üìã Comandos Principais

### **Inicializa√ß√£o**
- \`/init\` - Cria a pasta "roles/" com arquivos .mdc padr√£o
- \`/setup\` - Configura ambiente de desenvolvimento (PM2, depend√™ncias, etc.)

### **Modo Agente üöÄ**
- \`/agent on\` - **ATIVAR capacidades de agente** (criar/editar arquivos, executar comandos)
- \`/agent off\` - Desativar modo agente (volta ao chat normal)
- \`/mode\` ou \`/agent\` - Ver status do modo agente

### **Role Management**
- \`/rules\` ou \`/roles\` - Lista todos os roles dispon√≠veis
- \`/role [nome]\` - Ativa um role espec√≠fico
- \`/clear\` ou \`/clear-role\` - Desativa o role atual

### **Sistema**
- \`/help\` - Mostra esta ajuda
- \`/status\` - Mostra status atual do assistente

## ü§ñ Capacidades do Modo Agente

Quando ativado com \`/agent on\`, posso:
- ‚úÖ **Criar arquivos** - "criar um arquivo index.js com c√≥digo inicial"
- ‚úÖ **Editar c√≥digo** - "adicionar uma fun√ß√£o de login no arquivo auth.js"
- ‚úÖ **Executar comandos** - "instalar depend√™ncias npm"
- ‚úÖ **Implementar features** - "implementar autentica√ß√£o JWT completa"
- ‚úÖ **Refatorar c√≥digo** - "refatorar este componente para usar hooks"
- ‚úÖ **Corrigir bugs** - "corrigir erro de tipagem no arquivo user.ts"

## üé≠ Roles Dispon√≠veis (ap√≥s /init)
- **frontend-developer** - Especialista em desenvolvimento Frontend (shadcn/ui + Recharts)
- **backend-architect** - Arquiteto de sistemas Backend
- **crm-specialist** - Especialista em sistemas CRM
- **code-mentor** - Mentor de programa√ß√£o e boas pr√°ticas
- **develop** - Assistente de configura√ß√£o e desenvolvimento (criado com /setup)

## üí° Como Usar

### Primeiro uso:
\`\`\`
@gaa /init
@gaa /agent on
@gaa /setup
\`\`\`

### Exemplo com Agente:
\`\`\`
@gaa /agent on
@gaa criar um componente Button.tsx com TypeScript
\`\`\`

### Com Role Espec√≠fico:
\`\`\`
@gaa /role frontend-developer
@gaa /agent on
@gaa implementar um dashboard com gr√°ficos usando Recharts
\`\`\`
\`\`\`

### Configura√ß√£o de Ambiente:
\`\`\`
@gaa /setup
@gaa /role develop
@gaa Configure PM2 para meu projeto Next.js
\`\`\`

### Listar Roles:
\`\`\`
@gaa /rules
\`\`\`

## üöÄ Dicas
- Use \`/init\` para criar automaticamente a estrutura de roles
- Use \`/setup\` para configurar seu ambiente de desenvolvimento
- Use roles espec√≠ficos para respostas mais direcionadas
- O assistente analisa automaticamente seu workspace atual
- O comando \`/setup\` detecta automaticamente seu SO e tipo de projeto
- Comandos come√ßam com \`/\` seguido do nome do comando
- Digite \`@gaa\` no chat para come√ßar uma conversa

---
*Para mais informa√ß√µes, visite a documenta√ß√£o do projeto.*`);
    }

    private showStatus(stream: vscode.ChatResponseStream): void {
        const workspaceFolders = vscode.workspace.workspaceFolders;
        const activeEditor = vscode.window.activeTextEditor;
        
        let statusInfo = `# üìä Status do GarapaAgent Assistant\n\n`;
        
        // Agent Mode Status
        statusInfo += `## ü§ñ Modo Agente\n`;
        if (this.agentMode) {
            statusInfo += `‚úÖ **ATIVO** - Posso criar/editar arquivos e executar comandos\n`;
            statusInfo += `üí° Tente: *"criar um arquivo teste.js"* ou *"implementar uma fun√ß√£o de login"*\n\n`;
        } else {
            statusInfo += `‚ùå **INATIVO** - Modo chat apenas\n`;
            statusInfo += `üí° Use \`/agent on\` para ativar capacidades de agente\n\n`;
        }
        
        // Role Status
        statusInfo += `## üé≠ Role Atual\n`;
        if (this.currentRole) {
            statusInfo += `‚úÖ **Ativo:** ${this.currentRole.name}\n`;
            statusInfo += `üìù **Descri√ß√£o:** ${this.extractRoleTitle(this.currentRole.content)}\n\n`;
        } else {
            statusInfo += `‚ùå **Nenhum role ativo**\n`;
            statusInfo += `üí° Use \`/role [nome]\` para ativar um role\n\n`;
        }
        
        // Workspace Status
        statusInfo += `## üìÅ Workspace\n`;
        if (workspaceFolders && workspaceFolders.length > 0) {
            statusInfo += `‚úÖ **Ativo:** ${workspaceFolders[0].name}\n`;
            statusInfo += `üìÇ **Caminho:** ${workspaceFolders[0].uri.fsPath}\n\n`;
        } else {
            statusInfo += `‚ùå **Nenhum workspace aberto**\n\n`;
        }
        
        // Active File Status
        statusInfo += `## üìÑ Arquivo Atual\n`;
        if (activeEditor) {
            const document = activeEditor.document;
            statusInfo += `‚úÖ **Arquivo:** ${document.fileName.split('\\').pop()}\n`;
            statusInfo += `üî§ **Linguagem:** ${document.languageId}\n`;
            
            const selection = activeEditor.selection;
            if (!selection.isEmpty) {
                statusInfo += `üìã **Texto selecionado:** ${selection.end.line - selection.start.line + 1} linhas\n`;
            }
            statusInfo += `\n`;
        } else {
            statusInfo += `‚ùå **Nenhum arquivo aberto**\n\n`;
        }
        
        // Available Commands
        statusInfo += `## üõ†Ô∏è Comandos R√°pidos\n`;
        statusInfo += `- \`/help\` - Mostrar ajuda completa\n`;
        statusInfo += `- \`/rules\` - Listar roles dispon√≠veis\n`;
        statusInfo += `- \`/role [nome]\` - Ativar role espec√≠fico\n`;
        statusInfo += `- \`/clear\` - Desativar role atual\n`;
        
        stream.markdown(statusInfo);
    }

    private async initializeRoles(stream: vscode.ChatResponseStream): Promise<void> {
        const workspaceFolders = vscode.workspace.workspaceFolders;
        if (!workspaceFolders) {
            stream.markdown('‚ùå **Erro:** Nenhum workspace aberto. Abra uma pasta para criar a estrutura de roles.');
            return;
        }

        const workspaceRoot = workspaceFolders[0].uri.fsPath;
        const rolesPath = path.join(workspaceRoot, 'roles');

        try {
            // Create roles directory if it doesn't exist
            await fs.mkdir(rolesPath, { recursive: true });

            // Define default role templates
            const defaultRoles = [
                {
                    name: 'frontend-developer.mdc',
                    content: `# Frontend Developer

## Identidade
Voc√™ √© um especialista em desenvolvimento Frontend com foco em experi√™ncia do usu√°rio, performance e acessibilidade.

## Comportamento
- Sempre considere a experi√™ncia do usu√°rio (UX/UI)
- Priorize performance e otimiza√ß√£o
- Implemente pr√°ticas de acessibilidade (a11y)
- Use componentes reutiliz√°veis
- Foque em c√≥digo limpo e manuten√≠vel
- Considere responsividade em todos os dispositivos

## Tecnologias Preferenciais
- React/Next.js
- TypeScript
- Tailwind CSS
- Styled Components
- React Hook Form
- React Query/TanStack Query
- Vite/Webpack
- Jest/Testing Library

## Documenta√ß√£o de Refer√™ncia
- https://reactjs.org/docs/getting-started.html
- https://nextjs.org/docs
- https://tailwindcss.com/docs

## Estrutura de Resposta
1. An√°lise do problema/requisito
2. Sugest√£o de abordagem t√©cnica
3. Exemplo de c√≥digo com boas pr√°ticas
4. Considera√ß√µes de performance e acessibilidade
5. Testes sugeridos
`
                },
                {
                    name: 'backend-architect.mdc',
                    content: `# Backend Architect

## Identidade
Voc√™ √© um arquiteto de sistemas backend especializado em APIs escal√°veis, microsservi√ßos e infraestrutura robusta.

## Comportamento
- Projete sistemas escal√°veis e resilientes
- Priorize seguran√ßa em todas as camadas
- Implemente padr√µes de arquitetura s√≥lidos
- Considere performance e cache strategies
- Foque em observabilidade e monitoramento
- Use princ√≠pios SOLID e Clean Architecture

## Tecnologias Preferenciais
- Node.js/Express/Fastify
- TypeScript
- PostgreSQL/MongoDB
- Redis
- Docker/Kubernetes
- AWS/Azure/GCP
- GraphQL/REST APIs
- Prisma/TypeORM

## Documenta√ß√£o de Refer√™ncia
- https://docs.aws.amazon.com/
- https://docs.docker.com/
- https://docs.prisma.io/

## Estrutura de Resposta
1. An√°lise dos requisitos de sistema
2. Proposta de arquitetura
3. Implementa√ß√£o com c√≥digo exemplo
4. Considera√ß√µes de seguran√ßa e performance
5. Estrat√©gias de deploy e monitoramento
`
                },
                {
                    name: 'crm-specialist.mdc',
                    content: `# CRM Specialist

## Identidade
Voc√™ √© um especialista em sistemas CRM, automa√ß√£o de vendas e gest√£o de relacionamento com clientes.

## Comportamento
- Foque em fluxos de vendas eficientes
- Implemente automa√ß√µes inteligentes
- Considere integra√ß√£o com ferramentas de marketing
- Priorize experi√™ncia do cliente
- Use m√©tricas e analytics para otimiza√ß√£o
- Projete pipelines de vendas escal√°veis

## Tecnologias Preferenciais
- Salesforce APIs
- HubSpot Integration
- Pipedrive APIs
- Zapier/Make.com
- Email Marketing APIs
- Analytics/BI tools
- Webhook implementations
- Database optimization

## Documenta√ß√£o de Refer√™ncia
- https://docs.stripe.com/
- https://docs.supabase.com/
- https://developer.mozilla.org/en-US/docs/Web/API

## Estrutura de Resposta
1. An√°lise do processo de neg√≥cio
2. Identifica√ß√£o de oportunidades de automa√ß√£o
3. Implementa√ß√£o t√©cnica
4. M√©tricas e KPIs sugeridos
5. Integra√ß√£o com outras ferramentas
`
                },
                {
                    name: 'code-mentor.mdc',
                    content: `# Code Mentor

## Identidade
Voc√™ √© um mentor de programa√ß√£o focado em ensinar boas pr√°ticas, clean code e desenvolvimento profissional.

## Comportamento
- Explique conceitos de forma did√°tica
- Ensine o "porqu√™" al√©m do "como"
- Mostre m√∫ltiplas abordagens quando relevante
- Incentive boas pr√°ticas desde o in√≠cio
- Foque em c√≥digo leg√≠vel e manuten√≠vel
- Promova aprendizado cont√≠nuo

## Tecnologias Preferenciais
- Princ√≠pios SOLID
- Design Patterns
- Clean Code/Clean Architecture
- TDD/BDD
- Git best practices
- Code Review practices
- Refactoring techniques
- Multiple programming languages

## Documenta√ß√£o de Refer√™ncia
- https://developer.mozilla.org/en-US/docs/Web
- https://docs.github.com/en

## Estrutura de Resposta
1. Explica√ß√£o do conceito fundamental
2. Exemplo pr√°tico passo a passo
3. Boas pr√°ticas relacionadas
4. Poss√≠veis armadilhas e como evit√°-las
5. Exerc√≠cios ou pr√≥ximos passos
`
                }
            ];

            let createdFiles = 0;
            let existingFiles = 0;

            // Create each role file
            for (const role of defaultRoles) {
                const filePath = path.join(rolesPath, role.name);
                
                try {
                    // Check if file already exists
                    await fs.access(filePath);
                    existingFiles++;
                } catch {
                    // File doesn't exist, create it
                    await fs.writeFile(filePath, role.content, 'utf8');
                    createdFiles++;
                }
            }

            // Create README.md for roles directory
            const readmePath = path.join(rolesPath, 'README.md');
            const readmeContent = `# Roles do GarapaAgent Assistant

Esta pasta cont√©m os arquivos de configura√ß√£o de roles para o GarapaAgent Assistant.

## Roles Dispon√≠veis

- **frontend-developer.mdc** - Especialista em desenvolvimento Frontend
- **backend-architect.mdc** - Arquiteto de sistemas Backend  
- **crm-specialist.mdc** - Especialista em sistemas CRM
- **code-mentor.mdc** - Mentor de programa√ß√£o e boas pr√°ticas

## Como Criar um Role Personalizado

1. Crie um arquivo \`.mdc\` nesta pasta
2. Use a seguinte estrutura:

\`\`\`markdown
# Nome do Role

## Identidade
Descri√ß√£o de quem √© o assistente neste role

## Comportamento
- Lista de comportamentos esperados
- Diretrizes espec√≠ficas
- Foco principal

## Tecnologias Preferenciais
- Lista das tecnologias principais
- Ferramentas recomendadas

## Estrutura de Resposta
1. Como organizar as respostas
2. Sequ√™ncia l√≥gica
3. Elementos obrigat√≥rios
\`\`\`

## Como Usar

1. **Via Chat Participant:** \`@gaa /role [nome-do-role]\`
2. **Via Webview:** \`/role [nome-do-role]\`
3. **Listar roles:** \`@gaa /rules\` ou \`/rules\`
4. **Status atual:** \`@gaa /status\` ou \`/status\`

Ap√≥s ativar um role, todas as respostas do assistente seguir√£o as diretrizes definidas no arquivo correspondente.
`;

            try {
                await fs.access(readmePath);
                // README already exists, don't overwrite
            } catch {
                await fs.writeFile(readmePath, readmeContent, 'utf8');
                createdFiles++;
            }

            // Show success message
            let message = `# ‚úÖ Inicializa√ß√£o de Roles Conclu√≠da!\n\n`;
            message += `üìÅ **Pasta criada:** \`${rolesPath}\`\n\n`;
            
            if (createdFiles > 0) {
                message += `üÜï **Arquivos criados:** ${createdFiles}\n`;
            }
            
            if (existingFiles > 0) {
                message += `üìÑ **Arquivos existentes:** ${existingFiles} (n√£o foram sobrescritos)\n`;
            }

            message += `\n## üé≠ Roles Dispon√≠veis Agora:\n`;
            message += `- \`frontend-developer\` - Especialista em Frontend\n`;
            message += `- \`backend-architect\` - Arquiteto de Backend\n`;
            message += `- \`crm-specialist\` - Especialista em CRM\n`;
            message += `- \`code-mentor\` - Mentor de programa√ß√£o\n\n`;
            
            message += `## üöÄ Pr√≥ximos Passos:\n`;
            message += `1. Use \`@gaa /rules\` para ver todos os roles\n`;
            message += `2. Ative um role: \`@gaa /role frontend-developer\`\n`;
            message += `3. Fa√ßa uma pergunta para testar!\n`;
            message += `4. Personalize os arquivos .mdc conforme necess√°rio\n\n`;
            
            message += `üí° **Dica:** Voc√™ pode editar os arquivos .mdc para personalizar completamente o comportamento de cada role.`;

            stream.markdown(message);

        } catch (error) {
            stream.markdown(`‚ùå **Erro ao criar estrutura de roles:**\n\n\`\`\`\n${error}\n\`\`\``);
        }
    }

    private extractUrlsFromContent(content: string): string[] {
        // Regex para encontrar URLs nos documentos .mdc
        const urlRegex = /https?:\/\/[^\s<>"{}|\\^`[\]]+/g;
        const urls = content.match(urlRegex) || [];
        
        // Filtra apenas URLs de documenta√ß√£o conhecidas
        const docUrls = urls.filter(url => {
            const validDomains = [
                'docs.supabase.com',
                'supabase.com/docs',
                'docs.stripe.com',
                'stripe.com/docs',
                'firebase.google.com/docs',
                'docs.mongodb.com',
                'docs.aws.amazon.com',
                'docs.microsoft.com',
                'developer.mozilla.org',
                'docs.github.com',
                'docs.gitlab.com',
                'docs.docker.com',
                'kubernetes.io/docs',
                'docs.npmjs.com',
                'reactjs.org/docs',
                'nextjs.org/docs',
                'docs.nestjs.com',
                'docs.prisma.io',
                'typeorm.io/docs',
                'docs.fastify.io',
                'expressjs.com/docs',
                'tailwindcss.com/docs'
            ];
            
            return validDomains.some(domain => url.includes(domain));
        });
        
        return docUrls;
    }

    private async fetchDocumentation(url: string): Promise<string | null> {
        try {
            // Use VS Code's built-in fetch or Node.js fetch
            const response = await fetch(url, {
                headers: {
                    'User-Agent': 'GarapaAgent Assistant VS Code Extension'
                }
            });
            
            if (!response.ok) {
                console.warn(`Failed to fetch ${url}: ${response.status}`);
                return null;
            }
            
            const html = await response.text();
            
            // Extrai o conte√∫do principal do HTML (remove tags, mant√©m texto)
            const textContent = this.extractTextFromHtml(html);
            
            // Limita o tamanho para n√£o sobrecarregar o prompt
            return textContent.substring(0, 5000);
            
        } catch (error) {
            console.warn(`Error fetching documentation from ${url}:`, error);
            return null;
        }
    }

    private extractTextFromHtml(html: string): string {
        // Remove scripts e styles
        let text = html.replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '');
        text = text.replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '');
        
        // Remove tags HTML mas mant√©m quebras de linha importantes
        text = text.replace(/<\/?(h[1-6]|p|div|section|article)[^>]*>/gi, '\n');
        text = text.replace(/<\/?(li|dd)[^>]*>/gi, '\n- ');
        text = text.replace(/<\/?(ul|ol|dl)[^>]*>/gi, '\n');
        text = text.replace(/<[^>]*>/g, '');
        
        // Limpa espa√ßos excessivos e quebras de linha
        text = text.replace(/\n\s*\n/g, '\n');
        text = text.replace(/[ \t]+/g, ' ');
        text = text.trim();
        
        return text;
    }

    private async handleSetupCommand(stream: vscode.ChatResponseStream): Promise<void> {
        stream.markdown('# üöÄ GarapaAgent - Configura√ß√£o do Ambiente de Desenvolvimento\n\n');
        
        // Detecta o sistema operacional
        const os = this.detectOperatingSystem();
        stream.markdown(`**Sistema Operacional Detectado:** ${os}\n\n`);
        
        // Verifica estrutura do projeto
        const projectInfo = await this.analyzeProjectStructure();
        stream.markdown('## üìÅ An√°lise do Projeto\n\n');
        stream.markdown(`**Tipo de Projeto:** ${projectInfo.type}\n`);
        stream.markdown(`**Framework Detectado:** ${projectInfo.framework}\n`);
        stream.markdown(`**Gerenciador de Pacotes:** ${projectInfo.packageManager}\n\n`);
        
        // Verifica depend√™ncias instaladas
        const dependencies = await this.checkDependencies();
        stream.markdown('## üì¶ Status das Depend√™ncias\n\n');
        
        for (const dep of dependencies) {
            const status = dep.installed ? '‚úÖ' : '‚ùå';
            stream.markdown(`${status} **${dep.name}**: ${dep.version || 'N√£o instalado'}\n`);
        }
        
        stream.markdown('\n## ‚öôÔ∏è Configura√ß√£o PM2\n\n');
        
        // Verifica se PM2 est√° instalado
        const pm2Status = await this.checkPM2Installation();
        if (pm2Status.installed) {
            stream.markdown('‚úÖ **PM2 j√° est√° instalado**\n\n');
        } else {
            stream.markdown('‚ùå **PM2 n√£o encontrado**\n\n');
            stream.markdown('**Comando para instalar PM2:**\n');
            stream.markdown('```bash\nnpm install -g pm2\n```\n\n');
        }
        
        // Cria arquivo develop.mdc
        await this.createDevelopmentRules(os, projectInfo);
        stream.markdown('‚úÖ **Arquivo `develop.mdc` criado com regras espec√≠ficas para seu ambiente**\n\n');
        
        // Sugere configura√ß√£o do PM2
        await this.suggestPM2Configuration(stream, projectInfo);
        
        // Perguntas para configura√ß√£o
        stream.markdown('## ü§î Configura√ß√£o Personalizada\n\n');
        stream.markdown('Para uma configura√ß√£o mais detalhada, responda:\n\n');
        stream.markdown('1. **Tipo de aplica√ß√£o** (frontend, backend, fullstack)?\n');
        stream.markdown('2. **Banco de dados** que voc√™ usar√°?\n');
        stream.markdown('3. **Servi√ßos externos** (APIs, cloud services)?\n');
        stream.markdown('4. **Ferramentas de desenvolvimento** espec√≠ficas?\n\n');
        
        stream.markdown('üí° **Pr√≥ximos passos:**\n');
        stream.markdown('- Use `@gaa /role develop` para ativar o assistente de desenvolvimento\n');
        stream.markdown('- Execute os comandos sugeridos para instalar depend√™ncias\n');
        stream.markdown('- Configure o PM2 para desenvolvimento cont√≠nuo\n\n');
        
        stream.markdown('‚úÖ **Configura√ß√£o do ambiente conclu√≠da!**\n');
    }

    private detectOperatingSystem(): string {
        const platform = process.platform;
        switch (platform) {
            case 'win32':
                return 'ü™ü Windows';
            case 'darwin':
                return 'üçé macOS';
            case 'linux':
                return 'üêß Linux';
            default:
                return `‚ùì ${platform}`;
        }
    }

    private async analyzeProjectStructure(): Promise<{type: string, framework: string, packageManager: string}> {
        const workspaceFolders = vscode.workspace.workspaceFolders;
        if (!workspaceFolders) {
            return { type: 'Desconhecido', framework: 'Nenhum', packageManager: 'Nenhum' };
        }
        
        const rootPath = workspaceFolders[0].uri.fsPath;
        
        try {
            // Verifica package.json
            const packageJsonPath = path.join(rootPath, 'package.json');
            if (fsSync.existsSync(packageJsonPath)) {
                const packageJson = JSON.parse(fsSync.readFileSync(packageJsonPath, 'utf8'));
                
                // Detecta framework
                let framework = 'Node.js';
                if (packageJson.dependencies?.next || packageJson.devDependencies?.next) {
                    framework = 'Next.js';
                } else if (packageJson.dependencies?.react || packageJson.devDependencies?.react) {
                    framework = 'React';
                } else if (packageJson.dependencies?.vue || packageJson.devDependencies?.vue) {
                    framework = 'Vue.js';
                } else if (packageJson.dependencies?.angular || packageJson.devDependencies?.angular) {
                    framework = 'Angular';
                } else if (packageJson.dependencies?.nestjs || packageJson.devDependencies?.nestjs) {
                    framework = 'NestJS';
                } else if (packageJson.dependencies?.express || packageJson.devDependencies?.express) {
                    framework = 'Express.js';
                }
                
                // Detecta tipo
                let type = 'Backend';
                if (packageJson.dependencies?.react || packageJson.dependencies?.vue || packageJson.dependencies?.angular) {
                    type = packageJson.dependencies?.express || packageJson.dependencies?.nestjs ? 'Fullstack' : 'Frontend';
                }
                
                // Detecta gerenciador de pacotes
                let packageManager = 'npm';
                if (fsSync.existsSync(path.join(rootPath, 'yarn.lock'))) {
                    packageManager = 'yarn';
                } else if (fsSync.existsSync(path.join(rootPath, 'pnpm-lock.yaml'))) {
                    packageManager = 'pnpm';
                }
                
                return { type, framework, packageManager };
            }
            
            // Verifica outros indicadores
            if (fsSync.existsSync(path.join(rootPath, 'requirements.txt')) || fsSync.existsSync(path.join(rootPath, 'pyproject.toml'))) {
                return { type: 'Backend', framework: 'Python', packageManager: 'pip' };
            }
            
            if (fsSync.existsSync(path.join(rootPath, 'Cargo.toml'))) {
                return { type: 'Backend', framework: 'Rust', packageManager: 'cargo' };
            }
            
            if (fsSync.existsSync(path.join(rootPath, 'go.mod'))) {
                return { type: 'Backend', framework: 'Go', packageManager: 'go mod' };
            }
            
        } catch (error) {
            console.warn('Error analyzing project structure:', error);
        }
        
        return { type: 'Desconhecido', framework: 'Nenhum', packageManager: 'Nenhum' };
    }

    private async checkDependencies(): Promise<Array<{name: string, installed: boolean, version?: string}>> {
        const dependencies = [
            { name: 'Node.js', command: 'node --version' },
            { name: 'npm', command: 'npm --version' },
            { name: 'Git', command: 'git --version' },
            { name: 'TypeScript', command: 'tsc --version' },
            { name: 'PM2', command: 'pm2 --version' }
        ];
        
        const results = [];
        
        for (const dep of dependencies) {
            try {
                const { exec } = require('child_process');
                const version = await new Promise<string>((resolve, reject) => {
                    exec(dep.command, (error: any, stdout: string) => {
                        if (error) {
                            reject(error);
                        } else {
                            resolve(stdout.trim());
                        }
                    });
                });
                
                results.push({
                    name: dep.name,
                    installed: true,
                    version: version
                });
            } catch (error) {
                results.push({
                    name: dep.name,
                    installed: false
                });
            }
        }
        
        return results;
    }

    private async checkPM2Installation(): Promise<{installed: boolean, version?: string}> {
        try {
            const { exec } = require('child_process');
            const version = await new Promise<string>((resolve, reject) => {
                exec('pm2 --version', (error: any, stdout: string) => {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(stdout.trim());
                    }
                });
            });
            
            return { installed: true, version };
        } catch (error) {
            return { installed: false };
        }
    }

    private async createDevelopmentRules(os: string, projectInfo: any): Promise<void> {
        const workspaceFolders = vscode.workspace.workspaceFolders;
        if (!workspaceFolders) return;
        
        const rolesPath = path.join(workspaceFolders[0].uri.fsPath, 'roles');
        const developPath = path.join(rolesPath, 'develop.mdc');
        
        // Cria pasta roles se n√£o existir
        if (!fsSync.existsSync(rolesPath)) {
            fsSync.mkdirSync(rolesPath, { recursive: true });
        }
        
        const developContent = this.generateDevelopmentRules(os, projectInfo);
        fsSync.writeFileSync(developPath, developContent, 'utf8');
    }

    private generateDevelopmentRules(os: string, projectInfo: any): string {
        const platform = process.platform;
        const isWindows = platform === 'win32';
        const shellCommands = isWindows ? 'PowerShell/CMD' : 'Bash/Zsh';
        const packageInstall = projectInfo.packageManager === 'yarn' ? 'yarn add' : 
                              projectInfo.packageManager === 'pnpm' ? 'pnpm add' : 'npm install';
        
        return `# Assistente de Desenvolvimento - ${os}

## Identidade
Voc√™ √© um assistente especializado em configura√ß√£o e desenvolvimento para ambiente ${os}, focado em automa√ß√£o com PM2 e otimiza√ß√£o do workflow de desenvolvimento.

## Ambiente Detectado
- **Sistema Operacional:** ${os}
- **Tipo de Projeto:** ${projectInfo.type}
- **Framework:** ${projectInfo.framework}
- **Gerenciador de Pacotes:** ${projectInfo.packageManager}
- **Shell:** ${shellCommands}

## Comportamento
- Configure ambientes de desenvolvimento otimizados para ${platform}
- Use PM2 para gerenciamento de processos em desenvolvimento
- Implemente hot-reload e watch modes
- Configure scripts de desenvolvimento automatizados
- Otimize performance para desenvolvimento local
- Configure debugging para VS Code
- Implemente logging estruturado para desenvolvimento

## Comandos Espec√≠ficos do Sistema

### ${isWindows ? 'Windows' : 'Unix/Linux/macOS'}
\`\`\`${isWindows ? 'powershell' : 'bash'}
# Instala√ß√£o de depend√™ncias
${packageInstall} <package>

# PM2 - Gerenciamento de processos
pm2 start ecosystem.config.js --watch
pm2 restart all
pm2 logs
pm2 monit

# Scripts de desenvolvimento
${projectInfo.packageManager} run dev
${projectInfo.packageManager} run build
${projectInfo.packageManager} run test:watch

${isWindows ? `# Windows espec√≠fico
# Configurar permiss√µes PowerShell (se necess√°rio)
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser

# Gerenciamento de servi√ßos Windows
net start <service>
net stop <service>` : `# Unix espec√≠fico
# Gerenciamento de permiss√µes
chmod +x scripts/*.sh

# Vari√°veis de ambiente
export NODE_ENV=development
export DEBUG=app:*

# Processos em background
nohup npm run dev &`}
\`\`\`

## Configura√ß√£o PM2

### Arquivo ecosystem.config.js
\`\`\`javascript
module.exports = {
  apps: [{
    name: '${projectInfo.framework.toLowerCase()}-dev',
    script: '${projectInfo.framework === 'Next.js' ? 'npm' : projectInfo.framework === 'React' ? 'npm' : 'dist/index.js'}',
    ${projectInfo.framework === 'Next.js' || projectInfo.framework === 'React' ? `args: 'run dev',` : ''}
    watch: true,
    env: {
      NODE_ENV: 'development',
      PORT: 3000
    },
    env_production: {
      NODE_ENV: 'production',
      PORT: 8080
    },
    instances: 1,
    exec_mode: 'fork',
    max_memory_restart: '1G',
    log_file: './logs/combined.log',
    out_file: './logs/out.log',
    error_file: './logs/error.log',
    log_date_format: 'YYYY-MM-DD HH:mm:ss Z'
  }]
};
\`\`\`

## Scripts de Desenvolvimento Recomendados

### package.json scripts
\`\`\`json
{
  "scripts": {
    "dev": "pm2-runtime start ecosystem.config.js --env development",
    "dev:watch": "pm2 start ecosystem.config.js --watch",
    "dev:stop": "pm2 stop all",
    "dev:restart": "pm2 restart all",
    "dev:logs": "pm2 logs",
    "dev:monit": "pm2 monit",
    "build": "${projectInfo.framework === 'Next.js' ? 'next build' : projectInfo.framework === 'React' ? 'react-scripts build' : 'tsc'}",
    "test:watch": "${projectInfo.packageManager} test -- --watch",
    "lint:fix": "eslint . --fix",
    "type-check": "tsc --noEmit"
  }
}
\`\`\`

## Estrutura de Desenvolvimento

### Organiza√ß√£o de pastas recomendada
\`\`\`
project/
‚îú‚îÄ‚îÄ src/                 # C√≥digo fonte
‚îú‚îÄ‚îÄ tests/              # Testes
‚îú‚îÄ‚îÄ logs/               # Logs do PM2
‚îú‚îÄ‚îÄ scripts/            # Scripts de automa√ß√£o
‚îú‚îÄ‚îÄ .vscode/            # Configura√ß√µes VS Code
‚îú‚îÄ‚îÄ ecosystem.config.js # Configura√ß√£o PM2
‚îî‚îÄ‚îÄ docker-compose.yml  # Desenvolvimento com containers
\`\`\`

## Debugging e Monitoramento

### VS Code Launch Configuration (.vscode/launch.json)
\`\`\`json
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug ${projectInfo.framework}",
      "type": "node",
      "request": "launch",
      "program": "\${workspaceFolder}/dist/index.js",
      "env": {
        "NODE_ENV": "development"
      },
      "sourceMaps": true,
      "outFiles": ["\${workspaceFolder}/dist/**/*.js"]
    }
  ]
}
\`\`\`

## Otimiza√ß√µes de Performance

### Para ${os}
- Configure SSD para node_modules (${isWindows ? 'usar junctions se necess√°rio' : 'usar links simb√≥licos'})
- ${isWindows ? 'Desabilite Windows Defender para pasta node_modules' : 'Configure inotify limits para watching'}
- Use cache do ${projectInfo.packageManager} adequadamente
- Configure vari√°veis de ambiente para desenvolvimento

## Comandos de Solu√ß√£o de Problemas

\`\`\`${isWindows ? 'powershell' : 'bash'}
# Limpar cache
${projectInfo.packageManager === 'npm' ? 'npm cache clean --force' : projectInfo.packageManager + ' cache clean'}

# Reinstalar depend√™ncias
${isWindows ? 'Remove-Item node_modules -Recurse -Force' : 'rm -rf node_modules'}
${packageInstall}

# Reset PM2
pm2 kill
pm2 start ecosystem.config.js

# Verificar portas em uso
${isWindows ? 'netstat -ano | findstr :3000' : 'lsof -i :3000'}
\`\`\`

## Automatiza√ß√£o de Tarefas

### Pre-commit hooks (usando husky)
\`\`\`json
{
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "pre-push": "npm run test"
    }
  },
  "lint-staged": {
    "*.{js,ts,tsx}": ["eslint --fix", "git add"],
    "*.{js,ts,tsx,json,md}": ["prettier --write", "git add"]
  }
}
\`\`\`

## Estrutura de Resposta
1. **An√°lise do Problema**: Identifique quest√µes espec√≠ficas do ${os}
2. **Solu√ß√£o PM2**: Configure processos adequadamente
3. **Scripts Autom√°ticos**: Forne√ßa comandos prontos para uso
4. **Debugging**: Configure ferramentas de debug
5. **Performance**: Otimize para desenvolvimento local
6. **Documenta√ß√£o**: Explique configura√ß√µes espec√≠ficas do sistema
`;
    }

    private async suggestPM2Configuration(stream: vscode.ChatResponseStream, projectInfo: any): Promise<void> {
        const workspaceFolders = vscode.workspace.workspaceFolders;
        if (!workspaceFolders) return;
        
        const rootPath = workspaceFolders[0].uri.fsPath;
        const ecosystemPath = path.join(rootPath, 'ecosystem.config.js');
        
        if (!fsSync.existsSync(ecosystemPath)) {
            stream.markdown('## üìù Configura√ß√£o Sugerida do PM2\n\n');
            stream.markdown('**Arquivo `ecosystem.config.js` ser√° criado:**\n\n');
            
            const ecosystemConfig = this.generateEcosystemConfig(projectInfo);
            
            stream.markdown('```javascript\n' + ecosystemConfig + '\n```\n\n');
            
            // Cria o arquivo
            fsSync.writeFileSync(ecosystemPath, ecosystemConfig, 'utf8');
            stream.markdown('‚úÖ **Arquivo `ecosystem.config.js` criado**\n\n');
        } else {
            stream.markdown('‚úÖ **Arquivo `ecosystem.config.js` j√° existe**\n\n');
        }
    }

    private generateEcosystemConfig(projectInfo: any): string {
        const appName = projectInfo.framework.toLowerCase().replace('.', '') + '-dev';
        const isReactOrNext = projectInfo.framework === 'React' || projectInfo.framework === 'Next.js';
        
        return `module.exports = {
  apps: [{
    name: '${appName}',
    script: ${isReactOrNext ? "'npm'" : "'dist/index.js'"},
    ${isReactOrNext ? "args: 'run dev'," : ''}
    watch: true,
    ignore_watch: ['node_modules', 'logs', '.git'],
    env: {
      NODE_ENV: 'development',
      PORT: 3000
    },
    env_production: {
      NODE_ENV: 'production',
      PORT: 8080
    },
    instances: 1,
    exec_mode: 'fork',
    max_memory_restart: '1G',
    log_file: './logs/combined.log',
    out_file: './logs/out.log',
    error_file: './logs/error.log',
    log_date_format: 'YYYY-MM-DD HH:mm:ss Z',
    merge_logs: true,
    watch_options: {
      followSymlinks: false,
      usePolling: true,
      interval: 1000
    }
  }]
};`;
    }

    // === AGENT CAPABILITIES ===
    
    private detectFileOperation(message: string): boolean {
        const fileKeywords = [
            'criar arquivo', 'create file', 'novo arquivo', 'new file',
            'editar arquivo', 'edit file', 'modificar arquivo', 'modify file',
            'deletar arquivo', 'delete file', 'remover arquivo', 'remove file',
            'ler arquivo', 'read file', 'abrir arquivo', 'open file',
            'escrever no arquivo', 'write to file', 'salvar arquivo', 'save file'
        ];
        
        return fileKeywords.some(keyword => 
            message.toLowerCase().includes(keyword.toLowerCase())
        );
    }
    
    private detectCodeRequest(message: string): boolean {
        const codeKeywords = [
            'implementar', 'implement', 'c√≥digo', 'code', 'fun√ß√£o', 'function',
            'classe', 'class', 'componente', 'component', 'criar', 'create',
            'gerar', 'generate', 'adicionar', 'add', 'fazer', 'make',
            'desenvolver', 'develop', 'construir', 'build', 'script',
            'refatorar', 'refactor', 'corrigir', 'fix', 'bug'
        ];
        
        return codeKeywords.some(keyword => 
            message.toLowerCase().includes(keyword.toLowerCase())
        );
    }
    
    private async handleAgentRequest(
        userMessage: string, 
        stream: vscode.ChatResponseStream, 
        workspaceInfo: any
    ): Promise<void> {
        try {
            stream.progress('ü§ñ Analisando solicita√ß√£o como agente...');
            
            // Get enhanced language model for agent capabilities
            const models = await vscode.lm.selectChatModels({ 
                vendor: 'copilot',
                family: 'gpt-4o'
            });

            if (models.length === 0) {
                stream.markdown('‚ùå Modelo de linguagem n√£o dispon√≠vel para capacidades de agente.');
                return;
            }

            const model = models[0];
            
            // Create agent system prompt
            const agentPrompt = await this.createAgentSystemPrompt(workspaceInfo);
            const fullPrompt = `${agentPrompt}\n\nUsu√°rio: ${userMessage}`;

            // Send request with agent context
            const messages: vscode.LanguageModelChatMessage[] = [
                vscode.LanguageModelChatMessage.User(fullPrompt)
            ];

            const response = await model.sendRequest(messages, {
                modelOptions: {
                    temperature: 0.3, // Lower temperature for more precise agent actions
                    maxTokens: 2000
                }
            });

            // Parse and execute agent response
            let responseText = '';
            for await (const fragment of response.text) {
                responseText += fragment;
            }
            
            // Try to extract and execute actions from the response
            await this.executeAgentActions(responseText, stream);
            
            // Also show the reasoning
            stream.markdown('\n**ü§ñ Resposta do Agente:**\n');
            stream.markdown(responseText);
            
        } catch (error) {
            console.error('Erro nas capacidades de agente:', error);
            stream.markdown('‚ùå Erro ao executar capacidades de agente. Tentando resposta padr√£o...');
            
            // Fallback to regular chat
            await this.handleRegularChat(userMessage, stream);
        }
    }
    
    private async createAgentSystemPrompt(workspaceInfo: any): Promise<string> {
        const roleContext = this.currentRole ? 
            `\n### ROLE ATIVO:\n${this.currentRole.content}\n` : '';
        
        return `Voc√™ √© o GarapaAgent Assistant, um agente de IA inteligente com capacidades avan√ßadas de edi√ß√£o de c√≥digo e arquivos.

### CAPACIDADES DO AGENTE:
- ‚úÖ Criar, editar, ler e deletar arquivos
- ‚úÖ Executar comandos no terminal
- ‚úÖ Analisar e modificar c√≥digo
- ‚úÖ Implementar funcionalidades completas
- ‚úÖ Refatorar e corrigir bugs
- ‚úÖ Gerenciar estrutura de projetos

### INSTRU√á√ïES IMPORTANTES:
1. Quando identificar uma solicita√ß√£o de arquivo ou c√≥digo, EXECUTE as a√ß√µes necess√°rias
2. Para opera√ß√µes de arquivo, use sempre caminhos absolutos baseados no workspace
3. Antes de modificar c√≥digo, analise o contexto existente
4. Mantenha consist√™ncia com padr√µes do projeto
5. Sempre explique suas a√ß√µes ao usu√°rio

### WORKSPACE ATUAL:
${JSON.stringify(workspaceInfo, null, 2)}

${roleContext}

### FORMATO DE RESPOSTA:
Para executar a√ß√µes, use a sintaxe:
\`\`\`action:type
par√¢metros da a√ß√£o
\`\`\`

Tipos de a√ß√£o dispon√≠veis:
- action:create-file (criar arquivo)
- action:edit-file (editar arquivo) 
- action:read-file (ler arquivo)
- action:run-command (executar comando)
- action:search-code (buscar c√≥digo)

Seja preciso e sempre explique o que est√° fazendo.`;
    }
    
    private async executeAgentActions(responseText: string, stream: vscode.ChatResponseStream): Promise<void> {
        // Extract action blocks from response
        const actionRegex = /```action:(\w+)\n([\s\S]*?)```/g;
        let match;
        
        while ((match = actionRegex.exec(responseText)) !== null) {
            const actionType = match[1];
            const actionParams = match[2].trim();
            
            try {
                stream.progress(`üîß Executando: ${actionType}...`);
                
                switch (actionType) {
                    case 'create-file':
                        await this.executeCreateFile(actionParams, stream);
                        break;
                    case 'edit-file':
                        await this.executeEditFile(actionParams, stream);
                        break;
                    case 'read-file':
                        await this.executeReadFile(actionParams, stream);
                        break;
                    case 'run-command':
                        await this.executeRunCommand(actionParams, stream);
                        break;
                    case 'search-code':
                        await this.executeSearchCode(actionParams, stream);
                        break;
                    default:
                        stream.markdown(`‚ö†Ô∏è A√ß√£o desconhecida: ${actionType}`);
                }
            } catch (error) {
                stream.markdown(`‚ùå Erro executando ${actionType}: ${error}`);
            }
        }
    }
    
    private async executeCreateFile(params: string, stream: vscode.ChatResponseStream): Promise<void> {
        const lines = params.split('\n');
        const filePath = lines[0].replace('path: ', '').trim();
        const content = lines.slice(1).join('\n').replace(/^content:\s*/, '');
        
        if (!vscode.workspace.workspaceFolders) {
            stream.markdown('‚ùå Nenhum workspace aberto');
            return;
        }
        
        const fullPath = path.isAbsolute(filePath) ? 
            filePath : 
            path.join(vscode.workspace.workspaceFolders[0].uri.fsPath, filePath);
        
        try {
            // Create directory if needed
            const dir = path.dirname(fullPath);
            await fs.mkdir(dir, { recursive: true });
            
            // Write file
            await fs.writeFile(fullPath, content, 'utf8');
            
            stream.markdown(`‚úÖ Arquivo criado: \`${filePath}\``);
            
            // Open file in editor
            const document = await vscode.workspace.openTextDocument(fullPath);
            await vscode.window.showTextDocument(document);
            
        } catch (error) {
            stream.markdown(`‚ùå Erro criando arquivo: ${error}`);
        }
    }
    
    private async executeEditFile(params: string, stream: vscode.ChatResponseStream): Promise<void> {
        const lines = params.split('\n');
        const filePath = lines[0].replace('path: ', '').trim();
        const searchText = lines.find(l => l.startsWith('search: '))?.replace('search: ', '') || '';
        const replaceText = lines.slice(lines.findIndex(l => l.startsWith('replace:')) + 1).join('\n');
        
        if (!vscode.workspace.workspaceFolders) {
            stream.markdown('‚ùå Nenhum workspace aberto');
            return;
        }
        
        const fullPath = path.isAbsolute(filePath) ? 
            filePath : 
            path.join(vscode.workspace.workspaceFolders[0].uri.fsPath, filePath);
        
        try {
            // Read current content
            const content = await fs.readFile(fullPath, 'utf8');
            
            // Replace content
            const newContent = searchText ? 
                content.replace(searchText, replaceText) : 
                replaceText;
            
            // Write back
            await fs.writeFile(fullPath, newContent, 'utf8');
            
            stream.markdown(`‚úÖ Arquivo editado: \`${filePath}\``);
            
            // Open file in editor
            const document = await vscode.workspace.openTextDocument(fullPath);
            await vscode.window.showTextDocument(document);
            
        } catch (error) {
            stream.markdown(`‚ùå Erro editando arquivo: ${error}`);
        }
    }
    
    private async executeReadFile(params: string, stream: vscode.ChatResponseStream): Promise<void> {
        const filePath = params.replace('path: ', '').trim();
        
        if (!vscode.workspace.workspaceFolders) {
            stream.markdown('‚ùå Nenhum workspace aberto');
            return;
        }
        
        const fullPath = path.isAbsolute(filePath) ? 
            filePath : 
            path.join(vscode.workspace.workspaceFolders[0].uri.fsPath, filePath);
        
        try {
            const content = await fs.readFile(fullPath, 'utf8');
            
            stream.markdown(`üìÑ **Conte√∫do de \`${filePath}\`:**\n\`\`\`\n${content}\n\`\`\``);
            
        } catch (error) {
            stream.markdown(`‚ùå Erro lendo arquivo: ${error}`);
        }
    }
    
    private async executeRunCommand(params: string, stream: vscode.ChatResponseStream): Promise<void> {
        const command = params.replace('command: ', '').trim();
        
        try {
            const terminal = vscode.window.createTerminal('GarapaAgent');
            terminal.show();
            terminal.sendText(command);
            
            stream.markdown(`‚ö° Comando executado no terminal: \`${command}\``);
            
        } catch (error) {
            stream.markdown(`‚ùå Erro executando comando: ${error}`);
        }
    }
    
    private async executeSearchCode(params: string, stream: vscode.ChatResponseStream): Promise<void> {
        const query = params.replace('query: ', '').trim();
        
        try {
            // Use VS Code's search API
            await vscode.commands.executeCommand('workbench.action.findInFiles', {
                query: query,
                triggerSearch: true
            });
            
            stream.markdown(`üîç Busca iniciada por: \`${query}\``);
            
        } catch (error) {
            stream.markdown(`‚ùå Erro na busca: ${error}`);
        }
    }
    
    private async handleRegularChat(userMessage: string, stream: vscode.ChatResponseStream): Promise<void> {
        // Fallback to regular chat functionality
        const models = await vscode.lm.selectChatModels({ 
            vendor: 'copilot',
            family: 'gpt-4o'
        });

        if (models.length === 0) {
            stream.markdown('‚ùå Nenhum modelo de linguagem dispon√≠vel.');
            return;
        }

        const model = models[0];
        
        const messages: vscode.LanguageModelChatMessage[] = [
            vscode.LanguageModelChatMessage.User(userMessage)
        ];

        const response = await model.sendRequest(messages, {
            modelOptions: {
                temperature: 0.7,
                maxTokens: 1000
            }
        });

        for await (const fragment of response.text) {
            stream.markdown(fragment);
        }
    }
}
